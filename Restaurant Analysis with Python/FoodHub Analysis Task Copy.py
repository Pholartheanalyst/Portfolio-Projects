
#importing the needed libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


#read the csv data file
path = r"C:\Users\folaf\OneDrive\Documents\DATA ANALYSIS PROJECTS (PERSONAL)\co Mr Dipo\foodhub_order.csv"
foodhub = pd.read_csv(path)

foodhub.head()

#checking how many columns or rows we have
foodhub.shape

#check datatype of the dataset columns to see if there is a need to change any
#it is observed that the ratings attribute has the wrong type 
#It contains both string and interger value, to ensure consistency, 
#the "not given" rating will be changed to 1 and the datatype changed to interger
#Also, because the order_id and customer_id are unique values, their types will be changed to string (object)
foodhub.dtypes

foodhub['rating'] = foodhub['rating'].replace(['Not given'],1)
foodhub = foodhub.astype({"rating": int, "order_id": object, "customer_id": object})

#foodhub.rating.unique()

#get the statistical details
foodhub.describe()


#check for missing values
#there are no missing values
foodhub.isna().sum()
foodhub.isnull().sum()


#how many unique cuisines do we have?
foodhub.cuisine_type.unique()               #we have 14 unique cuisines

#check the mostly ordered cuisine type
foodhub.cuisine_type.value_counts()         #American, Japanese, Italian and Chinese cuisines are the top selling ones as they each have orders above 200

sns.countplot(data=foodhub,x='cuisine_type')
plt.xticks(rotation=90)
plt.show()


#When do we have the most sales (Weekday or weekend)
foodhub.day_of_the_week.value_counts()  

sns.countplot(data=foodhub,x='day_of_the_week')
plt.xticks(rotation=120)
plt.show()


#Order analysis by restaurant
RestByOrder = foodhub[['restaurant_name','order_id']].groupby('restaurant_name').count().sort_values(by = ['order_id'],axis = 0, ascending=False).reset_index().head(8)

plt.figure(figsize=(20,25))
#sns.set_style('dark')
sns.set(font_scale=2)
sns.barplot(x=RestByOrder['restaurant_name'], 
            y=RestByOrder['order_id'],orient='v',
            palette = "viridis")
plt.xticks(rotation='vertical')
plt.xlabel('Restaurant')
plt.ylabel('Revenue')
plt.title("Revenue Generated By Restaurant")
plt.show




#NOW TO ANSWER THE GIVEN ANALYSIS QUESTIONS
#1. which is the most popular cuisine type on weekends?
summary = foodhub.groupby(['cuisine_type', 'day_of_the_week']).count().reset_index().sort_values(by='food_preparation_time', ascending=False)
summary
#type(summary)


plt.figure(figsize=(20,25))
sns.set(font_scale=2)
sns.barplot(x=summary['cuisine_type'], 
            y=summary['order_id'],orient='v', 
            hue=summary['day_of_the_week'],
            estimator = np.sum,
            palette = "icefire")
plt.xticks(rotation='vertical')
plt.xlabel('Cuisine Types By Day of Week')
plt.ylabel('Total Order Value')
plt.title("Total Orders By Cuisine Type and Day of the Week")
plt.show





#2. what percentage of the orders cost more than 20 dollars?
percgreater20 = round((len(foodhub[foodhub['cost_of_the_order']>20])/len(foodhub['cost_of_the_order']))*100,2)
print(percgreater20)





#3. what is the mean order delivery time?
#the describe() function can also be used to check this
mean_delivery_time = round(foodhub['delivery_time'].mean(),2)
print(mean_delivery_time)





#4. The company has decided to give 20% discount vouchers to the top 3 most frequent customers. 
#Find the IDs of these customers and the number of orders they placed.
foodhub[['customer_id','order_id']].groupby('customer_id').count().sort_values(by = ['order_id'],axis = 0, ascending=False).head(3)

#getting the customers with the highest amount spent on orders
foodhub[['customer_id','cost_of_the_order']].groupby('customer_id').sum().sort_values(by = 'cost_of_the_order',axis = 0, ascending=False).head()






#5. Perform a multivariate analysis to explore relationships between the important variables in the dataset 
#(It is a good idea to explore relations between numerical variables as well as relations between numerical and categorical variable).
#check correlation between attributes

plt.figure(figsize=(10,5))
sns.heatmap(foodhub.corr(),annot=True)
plt.show()






#6. The company wants to provide a promotional offer in the advertisement 
#of the restaurants. The condition to get the offer is that the restaurants 
#must have a rating count of more than 59 and the average rating should be greater than 4. 
#Find the restaurants fulfilling the criteria to get the promotional offer.

#get the restaurants with a cummulative rating above 59
cummRating = foodhub[['restaurant_name','rating']].groupby('restaurant_name').count()>59
type(cummRating)

#get the restaurants with a average rating of 4
meanRating = foodhub[['restaurant_name','rating']].groupby('restaurant_name').mean()> 4
type(meanRating)

#concatenate the two dataframes filtering out restaurants that have conditions set to true on both dataframes
combined=cummRating.merge(meanRating,on='restaurant_name')
combined.reset_index(inplace=True)
combined

#promoRestaurants = combined[(combined["rating_x"] == True) & (combined["rating_y"] == True)]
#promoRestaurants.head()

class_23 = combined[(combined["rating_x"] == True) & combined[(combined["rating_y"] == True)]






#7. The company charges the restaurant 25% on the orders having cost greater than 20 dollars 
#and 15% on the orders having cost greater than 5 dollars. 
#Find the net revenue generated by the company across all orders.

foodhub['revenue'] = 0

foodhub['revenue'] = np.where(foodhub['cost_of_the_order'] > 20, (foodhub['cost_of_the_order'] * 0.25) ,foodhub['revenue'])
foodhub['revenue'] = np.where((foodhub['cost_of_the_order'] > 5) & (foodhub['cost_of_the_order'] < 20), (foodhub['cost_of_the_order'] * 0.15) ,foodhub['revenue'])

foodhub.sample(50)

TotalRevenue = round(foodhub['revenue'].sum(),2)

TotalCost = round(foodhub['cost_of_the_order'].sum(),2)





#8. The company wants to analyse the total time required to deliver the food. 
#What percentage of orders take more than 60 minutes to get delivered from the time the order is placed? 
#(The food has to be prepared and then delivered.)

foodhub['total_time'] = foodhub['food_preparation_time'] + foodhub['delivery_time']
#foodhub.to_csv('file1.csv')
PercentagePrepTimeAbove60 = round((len(foodhub[foodhub['total_time']>60])/len(foodhub['total_time']))*100,2)
print(PercentagePrepTimeAbove60)





#9. The company wants to analyse the delivery time of the orders on weekdays and weekends. 
#How does the mean delivery time vary during weekdays and weekends?

meanDeliveryTime = foodhub[['day_of_the_week','delivery_time']].groupby('day_of_the_week').mean()





#Revenue Generation analysis by restuarant
len(foodhub.restaurant_name.unique()) #178 unique restaurants
#The 5 Profit Making restaurants
ProfitMakingRest = foodhub[['restaurant_name','revenue']].groupby('restaurant_name').sum().sort_values(by = 'revenue',axis = 0, ascending=False).reset_index().head(70)

ProfitMakingRest.to_csv('Profit Making Restaurants.csv')

plt.figure(figsize=(20,25))
#sns.set_style('dark')
sns.set(font_scale=2)
sns.barplot(x=ProfitMakingRest['restaurant_name'], 
            y=ProfitMakingRest['revenue'],
            orient='v',
            palette = "flare")
plt.xticks(rotation='vertical')
plt.xlabel('Restaurant Name')
plt.ylabel('Total Revenue')
plt.title("Total Revenue By Restaurant")
plt.show


#The 5 loss making restaurants
LossMakingRest = foodhub[['restaurant_name','revenue']].groupby('restaurant_name').sum().sort_values(by = 'revenue',axis = 0, ascending=False).tail(100).reset_index()
type(LossMakingRest)

#LossMakingRest.to_csv('Loss Making Restaurants.csv')

